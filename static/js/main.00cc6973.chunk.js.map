{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","robots.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","index","key","SearchBox","searchChange","onChange","type","placeholder","Scroll","props","style","overflowY","border","height","children","username","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onChangeSearch","event","searchfield","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.00cc6973.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}?size=250x250`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n \n  return (\n    <div>\n      {robots.map((user, index) => (\n        <Card\n          key={index}\n          id={robots[index].id}\n          name={robots[index].name}\n          email={robots[index].email}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\nconst SearchBox = ({searchChange}) => {\n  return (\n  <div className=\"pa2\">\n\n  <input onChange={searchChange} className='pa3 ba b--green bg-light-blue' type=\"search\" placeholder=\"search robots\" />\n  </div>\n  );\n};\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border:'1px solid black', height: '500px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n  componentDidCatch(error,info) {\n    this.setState({hasError: true})\n  }\n  render() {\n    return this.state.hasError ? (\n      <h1>Oooops. That is not good</h1>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport { robots } from \"../robots\";\nimport ErrorBoundry from \"../components/ErrorBoundry.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      robots: [],\n      searchfield: \"\"\n    };\n  }\n  onChangeSearch = event => {\n    this.setState({\n      searchfield: event.target.value\n    });\n  };\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }));\n  }\n  render() {\n    const filterRobots = this.state.robots.filter(robot => {\n      return robot.name\n        .toLowerCase()\n        .includes(this.state.searchfield.toLowerCase());\n    });\n    return !robots.length ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f2\">F.R.I.E.N.D.S</h1>\n        <SearchBox searchChange={this.onChangeSearch} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filterRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from './containers/App'\nimport * as serviceWorker from \"./serviceWorker\";\nimport './App.css'\nimport { robots } from './robots';\nimport \"tachyons\";\n\nReactDOM.render(<App robots={robots}/> ,document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}